l1
typeof(l1)
l1
str<-S1
str<-s1
as.vector(unlist(strsplit(str,",")),mode="list")
s2<-as.vector(unlist(strsplit(str,",")),mode="list")
typeof(s2)
s2
s2<-as.vector(unlist(strsplit(str,",")),mode="vector")
s2<-as.vector(unlist(strsplit(str,",")),mode="list")
s3<-unlist(strsplit(str,","))
s3
typeof(s3)
s3<-as.vector(unlist(strsplit(str,",")))
s3
typeof(s3)
fun1<-function(x){
paste(x,", True Term")
}
fun1("babu")
s4<-lapply(s2,fun1)
s4
s4
s4
write.table(s4,"testout.txt")
list.files()
write.table(s4,"testout.txt",row.names=FALSE,col.names=FALSE,sep=",")
s4
fun1
fun1<-function(x){
paste(x,", True Term Insurance\n")
}
fun1(babu)
fun1("babu")
s2
s3<-lapply(s2,fun1)
s3
fun2<-function(y){
paste(y,"\n")
}
s3
s4<-lapply(s3,fun2)
s4
write.table(s4,"testout.txt",row.names=FALSE,col.names=FALSE)
write.table(s3,"testout.txt",row.names=FALSE,col.names=FALSE)
s3[1]
m1<-155TKR, 155TKS, 155TKT, 155TKU, 155TKV, 155TKW, 155TKX, 155TKY, 155TKZ, 155TLA, 155TLB, 155TLC, 155TLD, 155TLE, 155TLF, 155TLG, 155TLH, 155TLI, 155TLJ, 155TLK, 155TLL, 155TLM, 155TLN, 155TLO, 155TLP, 155TLQ, 155TLR, 155TLS, 155TLT, 155TLU, 155TLV, 155TLW, 155TLX, 155TLY, 155TLZ, 155TL0, 155TL1, 155TL2, 155TL3, 155TL4,155TL5, 155TL6, 155TL7, 155TL8, 155TL9, 155TMA, 155TMB, 155TMC, 155TMD, 155TME, 155TMF, 155TMG, 155TMH, 155TMI, 155TMJ, 155TMK, 155TML, 155TMM, 155TMN, 155TMO, 155TMP, 155TMQ, 155TMR
m1<-"155TKR, 155TKS, 155TKT, 155TKU, 155TKV, 155TKW, 155TKX, 155TKY, 155TKZ, 155TLA, 155TLB, 155TLC, 155TLD, 155TLE, 155TLF, 155TLG, 155TLH, 155TLI, 155TLJ, 155TLK, 155TLL, 155TLM, 155TLN, 155TLO, 155TLP, 155TLQ, 155TLR, 155TLS, 155TLT, 155TLU, 155TLV, 155TLW, 155TLX, 155TLY, 155TLZ, 155TL0, 155TL1, 155TL2, 155TL3, 155TL4,155TL5, 155TL6, 155TL7, 155TL8, 155TL9, 155TMA, 155TMB, 155TMC, 155TMD, 155TME, 155TMF, 155TMG, 155TMH, 155TMI, 155TMJ, 155TMK, 155TML, 155TMM, 155TMN, 155TMO, 155TMP, 155TMQ, 155TMR"
m1
typeof(m1)
m2<-as.vector(unlist(strsplit(m1,",")),mode="list")
m2
fum1<-function(x){paste(x,"\tTerm Life Insurance Policy\tTrueFit\n")}
m2
lapply(m2,fum1)
m3<-lapply(m2,fum1)
m3
write.table(m3,"testout.txt",row.names=FALSE,col.names=FALSE)
source("C:\\Users\\msreed\\Documents\\InRule\\AAC\\ProductPlan\\product1.R")
save.image("C:\\Users\\msreed\\Documents\\InRule\\AAC\\ProductPlan\\.RData")
ls()
q()
mymatrix
calcRelativeRisk(mymatrix,alpha=0.01)
  mymatrix <- matrix(c(156,9421,1531,14797),nrow=2,byrow=TRUE)
  colnames(mymatrix) <- c("Disease","Control")
  rownames(mymatrix) <- c("Exposed","Unexposed")
  print(mymatrix)
  calcRelativeRisk <- function(mymatrix,alpha=0.05,referencerow=2)
  {
  numrow <- nrow(mymatrix)
  myrownames <- rownames(mymatrix)
  for (i in 1:numrow)
  {
  rowname <- myrownames[i]
  DiseaseUnexposed <- mymatrix[referencerow,1]
  ControlUnexposed <- mymatrix[referencerow,2]
  if (i != referencerow)
  {
  DiseaseExposed <- mymatrix[i,1]
  ControlExposed <- mymatrix[i,2]
  totExposed <- DiseaseExposed + ControlExposed
  totUnexposed <- DiseaseUnexposed + ControlUnexposed
  probDiseaseGivenExposed <- DiseaseExposed/totExposed
  probDiseaseGivenUnexposed <- DiseaseUnexposed/totUnexposed
  # calculate the relative risk
  relativeRisk <- probDiseaseGivenExposed/probDiseaseGivenUnexposed
  print(paste("category =", rowname, ", relative risk = ",relativeRisk))
  # calculate a confidence interval
  confidenceLevel <- (1 - alpha)*100
  sigma <- sqrt((1/DiseaseExposed) - (1/totExposed) +
  (1/DiseaseUnexposed) - (1/totUnexposed))
  # sigma is the standard error of estimate of log of relative risk
  z <- qnorm(1-(alpha/2))
  lowervalue <- relativeRisk * exp(-z * sigma)
  uppervalue <- relativeRisk * exp( z * sigma)
  print(paste("category =", rowname, ", ", confidenceLevel,
  "% confidence interval = [",lowervalue,",",uppervalue,"]"))
  }
  }
  }
  calcOddsRatio <- function(mymatrix,alpha=0.05,referencerow=2,quiet=FALSE)
  {
  numrow <- nrow(mymatrix)
  myrownames <- rownames(mymatrix)
  for (i in 1:numrow)
  {
  rowname <- myrownames[i]
  DiseaseUnexposed <- mymatrix[referencerow,1]
  ControlUnexposed <- mymatrix[referencerow,2]
  if (i != referencerow)
  {
  DiseaseExposed <- mymatrix[i,1]
  ControlExposed <- mymatrix[i,2]
  totExposed <- DiseaseExposed + ControlExposed
  totUnexposed <- DiseaseUnexposed + ControlUnexposed
  probDiseaseGivenExposed <- DiseaseExposed/totExposed
  probDiseaseGivenUnexposed <- DiseaseUnexposed/totUnexposed
  probControlGivenExposed <- ControlExposed/totExposed
  probControlGivenUnexposed <- ControlUnexposed/totUnexposed
  # calculate the odds ratio
  oddsRatio <- (probDiseaseGivenExposed*probControlGivenUnexposed)/
  (probControlGivenExposed*probDiseaseGivenUnexposed)
  if (quiet == FALSE)
  {
  print(paste("category =", rowname, ", odds ratio = ",oddsRatio))
  }
  # calculate a confidence interval
  confidenceLevel <- (1 - alpha)*100
  sigma <- sqrt((1/DiseaseExposed)+(1/ControlExposed)+
  (1/DiseaseUnexposed)+(1/ControlUnexposed))
  # sigma is the standard error of our estimate of the log of the odds ratio
  z <- qnorm(1-(alpha/2))
  lowervalue <- oddsRatio * exp(-z * sigma)
  uppervalue <- oddsRatio * exp( z * sigma)
  if (quiet == FALSE)
  {
  print(paste("category =", rowname, ", ", confidenceLevel,
  "% confidence interval = [",lowervalue,",",uppervalue,"]"))
  }
  }
  }
  if (quiet == TRUE && numrow == 2) # If there are just two treatments (exposed/nonexposed)
  {
  return(oddsRatio)
  }
  }
  }
calcOddsRatio <- function(mymatrix,alpha=0.05,referencerow=2,quiet=FALSE)
  {
  numrow <- nrow(mymatrix)
  myrownames <- rownames(mymatrix)
  for (i in 1:numrow)
  {
  rowname <- myrownames[i]
  DiseaseUnexposed <- mymatrix[referencerow,1]
  ControlUnexposed <- mymatrix[referencerow,2]
  if (i != referencerow)
  {
  DiseaseExposed <- mymatrix[i,1]
  ControlExposed <- mymatrix[i,2]
  totExposed <- DiseaseExposed + ControlExposed
  totUnexposed <- DiseaseUnexposed + ControlUnexposed
  probDiseaseGivenExposed <- DiseaseExposed/totExposed
  probDiseaseGivenUnexposed <- DiseaseUnexposed/totUnexposed
  probControlGivenExposed <- ControlExposed/totExposed
  probControlGivenUnexposed <- ControlUnexposed/totUnexposed
  # calculate the odds ratio
  oddsRatio <- (probDiseaseGivenExposed*probControlGivenUnexposed)/
  (probControlGivenExposed*probDiseaseGivenUnexposed)
  if (quiet == FALSE)
  {
  print(paste("category =", rowname, ", odds ratio = ",oddsRatio))
  }
  # calculate a confidence interval
  confidenceLevel <- (1 - alpha)*100
  sigma <- sqrt((1/DiseaseExposed)+(1/ControlExposed)+
  (1/DiseaseUnexposed)+(1/ControlUnexposed))
  # sigma is the standard error of our estimate of the log of the odds ratio
  z <- qnorm(1-(alpha/2))
  lowervalue <- oddsRatio * exp(-z * sigma)
  uppervalue <- oddsRatio * exp( z * sigma)
  if (quiet == FALSE)
  {
  print(paste("category =", rowname, ", ", confidenceLevel,
  "% confidence interval = [",lowervalue,",",uppervalue,"]"))
  }
  }
  }
  if (quiet == TRUE && numrow == 2) # If there are just two treatments (exposed/nonexposed)
  {
  return(oddsRatio)
  }
  }
mymatrix3 <- matrix(c(30,24,76,241,82,509),nrow=3,byrow=TRUE)
 colnames(mymatrix3) <- c("Disease","Control")
 rownames(mymatrix3) <- c("Exposure1","Exposure2","Unexposed")
 print(mymatrix3)
calcOddsRatio(mymatrix, referencerow=3)
calcOddsRatio(mymatrix3, referencerow=3)
chisq.test(mymatrix3)
fisher.test(mymatrix3)
quit
save
q()
history
mymatrix3 <- matrix(c(30,24,76,241,82,509),nrow=3,byrow=TRUE)
 colnames(mymatrix3) <- c("Disease","Control")
 rownames(mymatrix3) <- c("Exposure1","Exposure2","Unexposed")
 print(mymatrix3)
 calcOddsRatio <- function(mymatrix,alpha=0.05,referencerow=2,quiet=FALSE)
  {
  numrow <- nrow(mymatrix)
  myrownames <- rownames(mymatrix)
  for (i in 1:numrow)
  {
  rowname <- myrownames[i]
  DiseaseUnexposed <- mymatrix[referencerow,1]
  ControlUnexposed <- mymatrix[referencerow,2]
  if (i != referencerow)
  {
  DiseaseExposed <- mymatrix[i,1]
  ControlExposed <- mymatrix[i,2]
  totExposed <- DiseaseExposed + ControlExposed
  totUnexposed <- DiseaseUnexposed + ControlUnexposed
  probDiseaseGivenExposed <- DiseaseExposed/totExposed
  probDiseaseGivenUnexposed <- DiseaseUnexposed/totUnexposed
  probControlGivenExposed <- ControlExposed/totExposed
  probControlGivenUnexposed <- ControlUnexposed/totUnexposed
  # calculate the odds ratio
  oddsRatio <- (probDiseaseGivenExposed*probControlGivenUnexposed)/
  (probControlGivenExposed*probDiseaseGivenUnexposed)
  if (quiet == FALSE)
  {
  print(paste("category =", rowname, ", odds ratio = ",oddsRatio))
  }
  # calculate a confidence interval
  confidenceLevel <- (1 - alpha)*100
  sigma <- sqrt((1/DiseaseExposed)+(1/ControlExposed)+
  (1/DiseaseUnexposed)+(1/ControlUnexposed))
  # sigma is the standard error of our estimate of the log of the odds ratio
  z <- qnorm(1-(alpha/2))
  lowervalue <- oddsRatio * exp(-z * sigma)
  uppervalue <- oddsRatio * exp( z * sigma)
  if (quiet == FALSE)
  {
  print(paste("category =", rowname, ", ", confidenceLevel,
  "% confidence interval = [",lowervalue,",",uppervalue,"]"))
  }
  }
  }
  if (quiet == TRUE && numrow == 2) # If there are just two treatments (exposed/nonexposed)
  {
  return(oddsRatio)
  }
  }
calcOddsRatio(mymatrix3, referencerow=3)
chisq.test(mymatrix3)
fisher.test(mymatrix3)
save.image("C:\\Users\\msreed\\Documents\\personal\\R\\.RData")
q()
history()
ls9)
ls()
calcOddsRatio
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
kings
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1))
birthts <- ts(births, frequency=12, start=c(1987,1))
plot.ts(birthts)
sts <- ts(souvenir, frequency=12, start=c(1987,1))
plot.ts(sts)
logsts<-log(sts)
plot.ts(logsts)
library("TTR")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library("TTR")
q()
history()
ls()
install.packages('TTR')
library("TTR")
ls()
plot.ts(sts
)
birthstimeseriescomponents <- decompose(birthstimeseries)
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=12, start=c(1946,1))
birthstimeseriescomponents <- decompose(birthstimeseries)
plot(birthstimeseriescomponents)
sts
stsd<-decompose(sts)
plot(stsd)
kings
kts<-ts(kings)
ktsd<-decompose(kts)
kts<-ts(kings.frequency=1)
kts<-ts(kings,frequency=1)
ktsd<-decompose(kts)
kts
plot(kings)
plot.ts(kts)
plot(kings)
birthstimeseries
plot(stsd)
hsitory
history()
install.package("forecast")
install.packages("forecast")
library("forecast")
rain <- scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=1)
rain
rainseries <- ts(rain,start=c(1813))
plot.ts(rainseries)
rainseriesforecasts <- HoltWinters(rainseries, beta=FALSE, gamma=FALSE)
rainseriesforecasts
plot(rainseriesforecasts)
rainseriesforecasts2 <- forecast.HoltWinters(rainseriesforecasts, h=8)
plot.forecast(rainseriesforecasts2)
q()
library(datasets)
?BOD
fix(USPASSENGERS)
?datasets
datasets
fix(BOD)
q()
history()
plot(kings)
kings
length(kings)
x<-c91:42)
x<-c(1:42)
lm(formula=kings~x)
lmkings<-lm(formula=kings~x)
sumkings<-summary(lmkings)
sumkings
corr(x,kings)
cor(x,kings)
rain <- scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=1)
rain
rainseries <- ts(rain,start=c(1813))
plot.ts(rainseries)
rainseriesforecasts <- HoltWinters(rainseries, beta=FALSE, gamma=FALSE)
rainseriesforecasts
plot(rainseriesforecasts)
rainseriesforecasts2 <- forecast.HoltWinters(rainseriesforecasts, h=8)
install.packages("forecast")
rainseriesforecasts2 <- forecast.HoltWinters(rainseriesforecasts, h=8)
rainseriesforecasts <- HoltWinters(rainseries, beta=FALSE, gamma=FALSE)
q()
pwd()
getwd()
quit
exit
q()
a1<-c(9,8,6,8,10,4,6,5,7,7)
a2<-9 7 11 12 10
8 9 13 11 19
6 6 8 16 14
8 6 6 11 5
10 6 14 9 10
4 11 11 23 11
6 6 13 12 14
5 3 13 10 15
7 8 10 19 11
7 7 11 11 11
t<-"9 7 11 12 10 8 9 13 11 19 6 6 8 16 14 8 6 6 11 5 10 6 14 9 10 4 11 11 23 11 6 6 13 12 14 5 3 13 10 15 7 8 10 19 11 7 7 11 11 11"
t
v<-c(9,7,11,12,10,8,9,13,11,19,6,6,8,16,14,8,6,6,11,5,10,6,14,9,10,4,11,11,23,11,6,6,13,12,14,5,3,13,10,15,7,8,10,19,11,7,7,11,11,11)
v
dim(v)<-c(5,10)
v
dim(v)<-c(10,5)
v
dim(v)<-c(5,10)
v
v1<-t(v)
v1
v1[1,]
v1[,1]
i<-1
v1[,i]
v1+1
mean(v1)
mean(v1[,1])
sst<-786
sst<-786.82
ssb<-351.52
sse<-435.30
ssb/4
ssb/4*(45/sst)
ssb/4*(45/sse)
df(9.085,4,45)
df(9.085,45,4)
pf(9.085,45,4)
pf(9.085,4,5)
pf(9.085,4,45)
df(0.95,4,45)
pf(0.95,4,45)
pf(0.95,45,4)
pf(0.95,4,45)
df(0.95,4,45)
pf(9.08,4,45)
pf(.08,4,45)
pf(2.61,4,45)
q()
ls()
a
a1
m1
del m1
delete m1
BOD
corr()
w
v
history()
vt
m
ls9)
ls()
w
ls()
m1
m2
m3
ls9)
ls()
ssb
a
b
t
t1
t<-c(10,5)
t
history()
dt
t
rm(t)
t
ls()
s2
rm (s*)
q()
getwd9)
getwd()
q()
q()
x
y
dd
dd<-seq(1,1,5)
dd
dd<-seq(1,5,5)
dd<-seq(1,5,1)
dd
dd<-seq(-100,100,1)
dd
ddx
ddy
ddy<-ddx^3-15*x-4
ddy
ddyx<-dd
ddx<-dd
ddy<-ddx^3-15*x-4
ddy
ddy
ddx
ddx<-ddx/10
ddy<-ddx^3-15*x-4
ddy
plot(ddx,ddy)
ddx
ddy
ddy<-ddx*ddx*ddx-15*x-4
ddy
ddy<-ddx*4+ddx
ddy
ddy<-ddx^3+ddx
ddy
ddy<-ddx^3-ddx
ddy
ddy<-ddx^3-15*ddx-4
ddx
ddy
plot(ddx,ddy)
ddx<-ddx/10
ddy<-ddx^3-15*ddx-4
plot(ddx,ddy)
ddx<-ddx*5
ddy<-ddx^3-15*ddx-4
plot(ddx,ddy)
ddy<-ddx^3-15*ddx
plot(ddx,ddy)
ddy<-ddx^3-4
plot(ddx,ddy)
q()
